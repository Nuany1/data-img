{
	"ID": "20230107153637-wzx5wrm",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20230107153637-wzx5wrm",
		"title": "Example",
		"updated": "20230107153846"
	},
	"Children": [
		{
			"ID": "20230107153642-d7soc69",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153642-d7soc69",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "批量消息发送"
				}
			]
		},
		{
			"ID": "20230107153642-pn85834",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153642-pn85834",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "批量消息发送能够提高发送效率，提升系统吞吐量。同一批批量消息的topic、waitStoreMsgOK属性必须保持一致，批量消息不支持延迟消息。批量消息发送一次最多可以发送 4MiB 的消息，但是如果需要发送更大的消息，建议将较大的消息分成多个不超过 1MiB 的小消息。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153642-bbdtfiu",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153642-bbdtfiu",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 发送批量消息"
				}
			]
		},
		{
			"ID": "20230107153642-gnqpjnu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153642-gnqpjnu",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "如果你一次只发送不超过 4MiB 的消息，使用批处理很容易："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153642-ni424sr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153642-ni424sr",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String topic = \"BatchTest\";\nList\u003cMessage\u003e messages = new ArrayList\u003c\u003e();\nmessages.add(new Message(topic, \"TagA\", \"OrderID001\", \"Hello world 0\".getBytes()));\nmessages.add(new Message(topic, \"TagA\", \"OrderID002\", \"Hello world 1\".getBytes()));\nmessages.add(new Message(topic, \"TagA\", \"OrderID003\", \"Hello world 2\".getBytes()));\ntry {\n    producer.send(messages);\n} catch (Exception e) {\n    e.printStackTrace();\n    //handle the error\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153642-2tghyaw",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153642-2tghyaw",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 拆分"
				}
			]
		},
		{
			"ID": "20230107153642-v3wly8a",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153642-v3wly8a",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "当您发送较大的消息时，复杂性会增加，如果您不确定它是否超过 4MiB的限制。 这时候，您最好将较大的消息分成多个不超过 1MiB 的小消息："
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153642-9ayfqpu",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153642-9ayfqpu",
				"updated": "20230107153642"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class ListSplitter implements Iterator\u003cList\u003cMessage\u003e\u003e { \n    private final int SIZE_LIMIT = 1024 * 1024 * 4;\n    private final List\u003cMessage\u003e messages;\n    private int currIndex;\n    public ListSplitter(List\u003cMessage\u003e messages) { \n        this.messages = messages;\n    }\n    @Override public boolean hasNext() {\n        return currIndex \u003c messages.size(); \n    }\n    @Override public List\u003cMessage\u003e next() { \n        int startIndex = getStartIndex();\n        int nextIndex = startIndex;\n        int totalSize = 0;\n        for (; nextIndex \u003c messages.size(); nextIndex++) {\n            Message message = messages.get(nextIndex); \n            int tmpSize = calcMessageSize(message);\n            if (tmpSize + totalSize \u003e SIZE_LIMIT) {\n                break; \n            } else {\n                totalSize += tmpSize; \n            }\n        }\n        List\u003cMessage\u003e subList = messages.subList(startIndex, nextIndex); \n        currIndex = nextIndex;\n        return subList;\n    }\n    private int getStartIndex() {\n        Message currMessage = messages.get(currIndex); \n        int tmpSize = calcMessageSize(currMessage); \n        while(tmpSize \u003e SIZE_LIMIT) {\n            currIndex += 1;\n            Message message = messages.get(curIndex); \n            tmpSize = calcMessageSize(message);\n        }\n        return currIndex; \n    }\n    private int calcMessageSize(Message message) {\n        int tmpSize = message.getTopic().length() + message.getBody().length(); \n        Map\u003cString, String\u003e properties = message.getProperties();\n        for (Map.Entry\u003cString, String\u003e entry : properties.entrySet()) {\n            tmpSize += entry.getKey().length() + entry.getValue().length(); \n        }\n        tmpSize = tmpSize + 20; // Increase the log overhead by 20 bytes\n        return tmpSize; \n    }\n}\n​\n// then you could split the large list into small ones:\nListSplitter splitter = new ListSplitter(messages);\nwhile (splitter.hasNext()) {\n   try {\n       List\u003cMessage\u003e  listItem = splitter.next();\n       producer.send(listItem);\n   } catch (Exception e) {\n       e.printStackTrace();\n       // handle the error\n   }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153707-8zqhgmv",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153707-8zqhgmv",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Schedule example"
				}
			]
		},
		{
			"ID": "20230107153707-20lyhzq",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-20lyhzq",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 启动消费者等待传入的订阅消息"
				}
			]
		},
		{
			"ID": "20230107153707-gutt43a",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153707-gutt43a",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport java.util.List;\n​\npublic class ScheduledMessageConsumer {\n​\n    public static void main(String[] args) throws Exception {\n        // Instantiate message consumer\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"ExampleConsumer\");\n        // Subscribe topics\n        consumer.subscribe(\"TestTopic\", \"*\");\n        // Register message listener\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List\u003cMessageExt\u003e messages, ConsumeConcurrentlyContext context) {\n                for (MessageExt message : messages) {\n                    // Print approximate delay time period\n                    System.out.println(\"Receive message[msgId=\" + message.getMsgId() + \"] \"\n                                       + (System.currentTimeMillis() - message.getStoreTimestamp()) + \"ms later\");\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        // Launch consumer\n        consumer.start();\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153707-9pdzyfy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-9pdzyfy",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 发送延迟消息"
				}
			]
		},
		{
			"ID": "20230107153707-4msktep",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153707-4msktep",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\n​\npublic class ScheduledMessageProducer {\n​\n    public static void main(String[] args) throws Exception {\n        // Instantiate a producer to send scheduled messages\n        DefaultMQProducer producer = new DefaultMQProducer(\"ExampleProducerGroup\");\n        // Launch producer\n        producer.start();\n        int totalMessagesToSend = 100;\n        for (int i = 0; i \u003c totalMessagesToSend; i++) {\n            Message message = new Message(\"TestTopic\", (\"Hello scheduled message \" + i).getBytes());\n            // This message will be delivered to consumer 10 seconds later.\n            message.setDelayTimeLevel(3);\n            // Send the message\n            producer.send(message);\n        }\n​\n        // Shutdown producer after use.\n        producer.shutdown();\n    }\n​\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153707-kn9b5xn",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-kn9b5xn",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3 确认"
				}
			]
		},
		{
			"ID": "20230107153707-t0i9a6y",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153707-t0i9a6y",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "您应该会看到消息在其存储时间后大约 10 秒被消耗。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153707-tnmiqm1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-tnmiqm1",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4 延迟消息的使用场景"
				}
			]
		},
		{
			"ID": "20230107153707-be1ry17",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153707-be1ry17",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "例如在电子商务中，如果提交订单，可以发送延迟消息，1小时后可以查看订单状态。 如果订单仍未付款，则可以取消订单并释放库存。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153707-f56lvdd",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153707-f56lvdd",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "5 使用延迟消息的限制"
				}
			]
		},
		{
			"ID": "20230107153707-stm8vv7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153707-stm8vv7",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// org/apache/rocketmq/store/config/MessageStoreConfig.java\n​\nprivate String messageDelayLevel = \"1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h\";\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153707-xoqxn46",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153707-xoqxn46",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "当前 RocketMQ 不支持任意时间的延迟。 生产者发送延迟消息前需要设置几个固定的延迟级别，分别对应1s到2h的1到18个延迟级，消息消费失败会进入延迟消息队列，消息发送时间与设置的延迟级别和重试次数有关。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153707-oewvvhh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153707-oewvvhh",
				"updated": "20230107153707"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "** See **"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "SendMessageProcessor.java"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-t12k5tx",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153729-t12k5tx",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Light message queue (LMQ)"
				}
			]
		},
		{
			"ID": "20230107153729-tkq9v0x",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-tkq9v0x",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "LMQ采用的读放大的策略，写一份数据，多个LMQ队列分发，"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "因为存储的成本和效率对用户的体感最明显。写多份不仅加大了存储成本，同时也对性能和数据准确一致性提出了挑战。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-8hydmjx",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-8hydmjx",
				"updated": "20230107153750"
			},
			"Children": [
				{
					"Type": "NodeImage",
					"Data": "span",
					"Children": [
						{
							"Type": "NodeBang"
						},
						{
							"Type": "NodeOpenBracket"
						},
						{
							"Type": "NodeLinkText"
						},
						{
							"Type": "NodeCloseBracket"
						},
						{
							"Type": "NodeOpenParen"
						},
						{
							"Type": "NodeLinkDest",
							"Data": "assets/LMQ_1.png?lastModify=1673077046"
						},
						{
							"Type": "NodeCloseParen"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "​"
				}
			]
		},
		{
			"ID": "20230107153729-yjapvfa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-yjapvfa",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "上图描述的是LMQ的队列存储模型，消息可以来自各个接入场景"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "（如服务端的MQ/AMQP，客户端的MQTT），但只会写一份存到commitlog里面，然后分发出多个需求场景的队列索引（ConsumerQueue），如服务端场景（MQ/AMQP）可以按照一级Topic队列进行传统的服务端消费，客户端MQTT场景可以按照MQTT多级Topic(也即 LMQ)进行消费消息。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-xheqlwr",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153729-xheqlwr",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、broker启动配置"
				}
			]
		},
		{
			"ID": "20230107153729-xaoo1qf",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-xaoo1qf",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "broker.conf文件需要增加以下的配置项，开启LMQ开关，这样就可以识别LMQ相关属性的消息，进行原子分发消息到LMQ队列"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-y2pwc5g",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153729-y2pwc5g",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "enableLmq = true\nenableMultiDispatch = true\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153729-vi48a6m",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153729-vi48a6m",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、发送消息"
				}
			]
		},
		{
			"ID": "20230107153729-n9jqzrt",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-n9jqzrt",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "发送消息的时候通过设置 INNER_MULTI_DISPATCH 属性，LMQ queue使用逗号分割，queue前缀必须是 %LMQ%，这样broker就可以识别LMQ queue."
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "以下代码只是demo伪代码 具体逻辑参照执行即可"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-3epvaxh",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153729-3epvaxh",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\nproducer.setNamesrvAddr(\"name-server1-ip:9876;name-server2-ip:9876\");\nproducer.start();\n​\n​\n/*\n* Create a message instance, specifying topic, tag and message body.\n*/\nMessage msg = new Message(\"TopicTest\" /* Topic */,\n                          \"TagA\" /* Tag */,\n                          (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n                         );\n/*\n* INNER_MULTI_DISPATCH property and PREFIX must start as \"%LMQ%\",\n* If it is multiple LMQ, need to use “,” split\n*/\nmessage.putUserProperty(\"INNER_MULTI_DISPATCH\", \"%LMQ%123,%LMQ%456\");\n/*\n* Call send message to deliver message to one of brokers.\n*/\nSendResult sendResult = producer.send(msg);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153729-t0hwlo1",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153729-t0hwlo1",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、拉取消息"
				}
			]
		},
		{
			"ID": "20230107153729-ylfor6i",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153729-ylfor6i",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "LMQ queue在每个broker上只有一个queue，也即queueId为0， 指明轻量级的MessageQueue，就可以拉取消息进行消费。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "\n"
				},
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "以下代码只是demo伪代码 具体逻辑参照执行即可"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153729-t0xxq03",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153729-t0xxq03",
				"updated": "20230107153729"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer();\ndefaultMQPullConsumer.setNamesrvAddr(\"name-server1-ip:9876;name-server2-ip:9876\");\ndefaultMQPullConsumer.setVipChannelEnabled(false);\ndefaultMQPullConsumer.setConsumerGroup(\"CID_RMQ_SYS_LMQ_TEST\");\ndefaultMQPullConsumer.setInstanceName(\"CID_RMQ_SYS_LMQ_TEST\");\ndefaultMQPullConsumer.setRegisterTopics(new HashSet\u003c\u003e(Arrays.asList(\"TopicTest\")));\ndefaultMQPullConsumer.setBrokerSuspendMaxTimeMillis(2000);\ndefaultMQPullConsumer.setConsumerTimeoutMillisWhenSuspend(3000);\ndefaultMQPullConsumer.start();\n​\nString brokerName = \"set broker Name\";\nMessageQueue mq = new MessageQueue(\"%LMQ%123\", brokerName, 0);\ndefaultMQPullConsumer.getDefaultMQPullConsumerImpl().getRebalanceImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(\"TopicTest\");\n​\nThread.sleep(30000);\nLong offset = defaultMQPullConsumer.maxOffset(mq);\n​\ndefaultMQPullConsumer.pullBlockIfNotFound(\n                mq, \"*\", offset, 32,\n                new PullCallback() {\n                    @Override\n                    public void onSuccess(PullResult pullResult) {\n                        List\u003cMessageExt\u003e list = pullResult.getMsgFoundList();\n                        if (list == null || list.isEmpty()) {\n                            return;\n                        }\n                        for (MessageExt messageExt : list) {\n                            System.out.println(messageExt);\n                        }    \n                    }\n                    @Override\n                    public void onException(Throwable e) {\n                       \n                    }\n});\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-0fq2p3n",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153808-0fq2p3n",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Basic Sample"
				}
			]
		},
		{
			"ID": "20230107153808-5vk3xk3",
			"Type": "NodeThematicBreak",
			"Properties": {
				"id": "20230107153808-5vk3xk3",
				"updated": "20230107153808"
			}
		},
		{
			"ID": "20230107153808-hxjpfys",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-hxjpfys",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "基本示例中提供了以下两个功能"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-m2pmtj7",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20230107153808-m2pmtj7",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"ID": "20230107153808-kscxzct",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107153808-kscxzct",
						"updated": "20230107153808"
					},
					"Children": [
						{
							"ID": "20230107153808-vq7akk8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153808-vq7akk8",
								"updated": "20230107153808"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "RocketMQ可用于以三种方式发送消息：可靠的同步、可靠的异步和单向传输。前两种消息类型是可靠的，因为无论它们是否成功发送都有响应。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153808-9m0wsh7",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20230107153808-9m0wsh7",
						"updated": "20230107153808"
					},
					"Children": [
						{
							"ID": "20230107153808-omu8ecc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153808-omu8ecc",
								"updated": "20230107153808"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "RocketMQ可以用来消费消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-dt1svn1",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153808-dt1svn1",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 添加依赖"
				}
			]
		},
		{
			"ID": "20230107153808-qinstlb",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-qinstlb",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "maven:"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-e5pssv8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-e5pssv8",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\u003cdependency\u003e\n  \u003cgroupId\u003eorg.apache.rocketmq\u003c/groupId\u003e\n  \u003cartifactId\u003erocketmq-client\u003c/artifactId\u003e\n  \u003cversion\u003e4.3.0\u003c/version\u003e\n\u003c/dependency\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-jyqpuij",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-jyqpuij",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "**gradle: **"
				}
			]
		},
		{
			"ID": "20230107153808-ne568bk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-ne568bk",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "compile 'org.apache.rocketmq:rocketmq-client:4.3.0'\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-fvqj5ck",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153808-fvqj5ck",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 发送消息"
				}
			]
		},
		{
			"ID": "20230107153808-pcgrm50",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20230107153808-pcgrm50",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1 使用Producer发送同步消息"
				}
			]
		},
		{
			"ID": "20230107153808-xuzhjfa",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-xuzhjfa",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "可靠的同步传输被广泛应用于各种场景，如重要的通知消息、短消息通知等。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-6z4cqpr",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-6z4cqpr",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class SyncProducer {\n  public static void main(String[] args) throws Exception {\n    // Instantiate with a producer group name\n    DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n    // Specify name server addresses\n    producer.setNamesrvAddr(\"localhost:9876\");\n    // Launch the producer instance\n    producer.start();\n    for (int i = 0; i \u003c 100; i++) {\n      // Create a message instance with specifying topic, tag and message body\n      Message msg = new Message(\"TopicTest\" /* Topic */,\n        \"TagA\" /* Tag */,\n        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n        );\n      // Send message to one of brokers\n      SendResult sendResult = producer.send(msg);\n      // Check whether the message has been delivered by the callback of sendResult\n      System.out.printf(\"%s%n\", sendResult);\n    }\n    // Shut down once the producer instance is not longer in use\n    producer.shutdown();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-70v16k0",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20230107153808-70v16k0",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2 发送异步消息"
				}
			]
		},
		{
			"ID": "20230107153808-4orqw00",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-4orqw00",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "异步传输通常用于响应时间敏感的业务场景。这意味着发送方无法等待代理的响应太长时间。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-d9nnd4j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-d9nnd4j",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class AsyncProducer {\n  public static void main(String[] args) throws Exception {\n    // Instantiate with a producer group name\n    DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n    // Specify name server addresses\n    producer.setNamesrvAddr(\"localhost:9876\");\n    // Launch the producer instance\n    producer.start();\n    producer.setRetryTimesWhenSendAsyncFailed(0);\n    for (int i = 0; i \u003c 100; i++) {\n      final int index = i;\n      // Create a message instance with specifying topic, tag and message body\n      Message msg = new Message(\"TopicTest\",\n        \"TagA\",\n        \"OrderID188\",\n        \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n      // SendCallback: receive the callback of the asynchronous return result.\n      producer.send(msg, new SendCallback() {\n        @Override\n        public void onSuccess(SendResult sendResult) {\n          System.out.printf(\"%-10d OK %s %n\", index,\n            sendResult.getMsgId());\n        }\n        @Override\n        public void onException(Throwable e) {\n          System.out.printf(\"%-10d Exception %s %n\", index, e);\n          e.printStackTrace();\n        }\n      });\n    }\n    // Shut down once the producer instance is not longer in use\n    producer.shutdown();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-me2auzz",
			"Type": "NodeHeading",
			"HeadingLevel": 5,
			"Properties": {
				"id": "20230107153808-me2auzz",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3 以单向模式发送消息"
				}
			]
		},
		{
			"ID": "20230107153808-o2dedoj",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153808-o2dedoj",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "单向传输用于需要中等可靠性的情况，如日志收集。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153808-srhyngb",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-srhyngb",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class OnewayProducer {\n  public static void main(String[] args) throws Exception{\n    // Instantiate with a producer group name\n    DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n    // Specify name server addresses\n    producer.setNamesrvAddr(\"localhost:9876\");\n    // Launch the producer instance\n    producer.start();\n    for (int i = 0; i \u003c 100; i++) {\n      // Create a message instance with specifying topic, tag and message body\n      Message msg = new Message(\"TopicTest\" /* Topic */,\n        \"TagA\" /* Tag */,\n        (\"Hello RocketMQ \" + i).getBytes(RemotingHelper.DEFAULT_CHARSET) /* Message body */\n      );\n      // Send in one-way mode, no return result\n      producer.sendOneway(msg);\n    }\n    // Shut down once the producer instance is not longer in use\n     producer.shutdown();\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153808-78y8uis",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20230107153808-78y8uis",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3 消费消息"
				}
			]
		},
		{
			"ID": "20230107153808-khkvglk",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20230107153808-khkvglk",
				"updated": "20230107153808"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class Consumer {\n  public static void main(String[] args) throws InterruptedException, MQClientException {\n    // Instantiate with specified consumer group name\n    DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(\"please_rename_unique_group_name\");\n    \n    // Specify name server addresses\n    consumer.setNamesrvAddr(\"localhost:9876\");\n​\n    // Subscribe one or more topics and tags for finding those messages need to be consumed\n    consumer.subscribe(\"TopicTest\", \"*\");\n    // Register callback to execute on arrival of messages fetched from brokers\n    consumer.registerMessageListener(new MessageListenerConcurrently() {\n      @Override\n      public ConsumeConcurrentlyStatus consumeMessage(List\u003cMessageExt\u003e msgs, ConsumeConcurrentlyContext context) {\n        System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n        // Mark the message that have been consumed successfully\n        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n      }\n    });\n    // Launch the consumer instance\n    consumer.start();\n    System.out.printf(\"Consumer Started.%n\");\n  }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20230107153842-gyfkymg",
			"Type": "NodeHeading",
			"HeadingLevel": 1,
			"Properties": {
				"id": "20230107153842-gyfkymg",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "经常被问到的问题"
				}
			]
		},
		{
			"ID": "20230107153842-vjivjzo",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153842-vjivjzo",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "以下是关于RocketMQ项目的常见问题"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-35da3o3",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153842-35da3o3",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1 基本"
				}
			]
		},
		{
			"ID": "20230107153842-6bisb5z",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230107153842-6bisb5z",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"ID": "20230107153842-eu74e4d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230107153842-eu74e4d",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-gqvpnd0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-gqvpnd0",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "为什么我们要使用RocketMQ而不是选择其他的产品？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "请参考"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeLink",
									"Data": "span",
									"Children": [
										{
											"Type": "NodeOpenBracket"
										},
										{
											"Type": "NodeLinkText",
											"Data": "为什么要选择RocketMQ"
										},
										{
											"Type": "NodeCloseBracket"
										},
										{
											"Type": "NodeOpenParen"
										},
										{
											"Type": "NodeLinkDest",
											"Data": "http://rocketmq.apache.org/docs/motivation/"
										},
										{
											"Type": "NodeCloseParen"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-3yd8jxt",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230107153842-3yd8jxt",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-i10chn0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-i10chn0",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "我是否需要安装其他的软件才能使用RocketMQ，例如zookeeper？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "不需要，RocketMQ可以独立的运行。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-qf9ibam",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153842-qf9ibam",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2 使用"
				}
			]
		},
		{
			"ID": "20230107153842-9gf4b48",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230107153842-9gf4b48",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"ID": "20230107153842-8rktad6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230107153842-8rktad6",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-qbmxjzk",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-qbmxjzk",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "新创建的Consumer ID从哪里开始消费消息？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）如果发送的消息在三天之内，那么消费者会从服务器中保存的第一条消息开始消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）如果发送的消息已经超过三天，则消费者会从服务器中的最新消息开始消费，也就是从队列的尾部开始消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "3）如果消费者重新启动，那么它会从最后一个消费位置开始消费消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-j8ywyl6",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230107153842-j8ywyl6",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-kh5eme2",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-kh5eme2",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当消费失败的时候如何重新消费消息？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）在集群模式下，消费的业务逻辑代码会返回Action.ReconsumerLater，NULL，或者抛出异常，如果一条消息消费失败，最多会重试16次，之后该消息会被丢弃。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）在广播消费模式下，广播消费仍然保证消息至少被消费一次，但不提供重发的选项。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-pmkdniu",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230107153842-pmkdniu",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-jp0eqfl",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-jp0eqfl",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当消费失败的时候如何找到失败的消息？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）使用按时间的主题查询，可以查询到一段时间内的消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）使用主题和消息ID来准确查询消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "3）使用主题和消息的Key来准确查询所有消息Key相同的消息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-jpkyc1d",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230107153842-jpkyc1d",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-ebnhy4u",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-ebnhy4u",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消息只会被传递一次吗？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "RocketMQ 确保所有消息至少传递一次。 在大多数情况下，消息不会重复。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-n2f4yla",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NS4=",
						"Num": 5
					},
					"Properties": {
						"id": "20230107153842-n2f4yla",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-wgongh8",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-wgongh8",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "如何增加一个新的Broker？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）启动一个新的Broker并将其注册到name server中的Broker列表里。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）默认只自动创建内部系统topic和consumer group。 如果您希望在新节点上拥有您的业务主题和消费者组，请从现有的Broker中复制它们。 我们提供了管理工具和命令行来处理此问题。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-wy9pcy8",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153842-wy9pcy8",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3 配置相关"
				}
			]
		},
		{
			"ID": "20230107153842-1vonuab",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153842-1vonuab",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeStrong",
					"Data": "strong",
					"Children": [
						{
							"Type": "NodeStrongA6kOpenMarker",
							"Data": "**"
						},
						{
							"Type": "NodeText",
							"Data": "以下回答均为默认值，可通过配置修改。"
						},
						{
							"Type": "NodeStrongA6kCloseMarker",
							"Data": "**"
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-lgrzpmv",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230107153842-lgrzpmv",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"ID": "20230107153842-rl4kfgv",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230107153842-rl4kfgv",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-uqsq843",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-uqsq843",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消息在服务器上可以保存多长时间？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "存储的消息将最多保存 3 天，超过 3 天未使用的消息将被删除。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-yd40bti",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230107153842-yd40bti",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-2oh0rc4",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-2oh0rc4",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消息体的大小限制是多少？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "通常是256KB"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-nkq6alm",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230107153842-nkq6alm",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-jtmwlsn",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-jtmwlsn",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "怎么设置消费者线程数？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当你启动消费者的时候，可以设置 ConsumeThreadNums属性的值，举例如下："
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						},
						{
							"ID": "20230107153842-3qw0yvr",
							"Type": "NodeCodeBlock",
							"IsFencedCodeBlock": true,
							"Properties": {
								"id": "20230107153842-3qw0yvr",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeCodeBlockFenceOpenMarker",
									"Data": "```"
								},
								{
									"Type": "NodeCodeBlockFenceInfoMarker"
								},
								{
									"Type": "NodeCodeBlockCode",
									"Data": "consumer.setConsumeThreadMin(20);\nconsumer.setConsumeThreadMax(20);\n"
								},
								{
									"Type": "NodeCodeBlockFenceCloseMarker",
									"Data": "```"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153842-0xsd03v",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20230107153842-0xsd03v",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "4 错误"
				}
			]
		},
		{
			"ID": "20230107153842-7idp8gb",
			"Type": "NodeList",
			"ListData": {
				"Typ": 1
			},
			"Properties": {
				"id": "20230107153842-7idp8gb",
				"updated": "20230107153842"
			},
			"Children": [
				{
					"ID": "20230107153842-s46pmsi",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "MS4=",
						"Num": 1
					},
					"Properties": {
						"id": "20230107153842-s46pmsi",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-ulg0lyq",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-ulg0lyq",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当你启动一个生产者或消费者的过程失败了并且错误信息是生产者组或消费者重复"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "原因：使用同一个Producer/Consumer Group在同一个JVM中启动多个Producer/Consumer实例可能会导致客户端无法启动。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "解决方案：确保一个 Producer/Consumer Group 对应的 JVM 只启动一个 Producer/Consumer 实例。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-kvui8gx",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "Mi4=",
						"Num": 2
					},
					"Properties": {
						"id": "20230107153842-kvui8gx",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-danfds9",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-danfds9",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消费者无法在广播模式下开始加载 json 文件"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "原因：fastjson 版本太低，无法让广播消费者加载本地 offsets.json，导致消费者启动失败。 损坏的 fastjson 文件也会导致同样的问题。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "解决方案：Fastjson 版本必须升级到 RocketMQ 客户端依赖版本，以确保可以加载本地 offsets.json。 默认情况下，offsets.json 文件在 /home/{user}/.rocketmq_offsets 中。 或者检查fastjson的完整性。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-9ssu61h",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "My4=",
						"Num": 3
					},
					"Properties": {
						"id": "20230107153842-9ssu61h",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-q9bkwl0",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-q9bkwl0",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Broker崩溃以后有什么影响？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）Master节点崩溃"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "消息不能再发送到该Broker集群，但是如果您有另一个可用的Broker集群，那么在主题存在的条件下仍然可以发送消息。消息仍然可以从Slave节点消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）一些Slave节点崩溃"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "只要有另一个工作的slave，就不会影响发送消息。 对消费消息也不会产生影响，除非消费者组设置为优先从该Slave消费。 默认情况下，消费者组从 master 消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "3）所有Slave节点崩溃"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "向master发送消息不会有任何影响，但是，如果master是SYNC_MASTER，producer会得到一个SLAVE_NOT_AVAILABLE，表示消息没有发送给任何slave。 对消费消息也没有影响，除非消费者组设置为优先从slave消费。 默认情况下，消费者组从master消费。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				},
				{
					"ID": "20230107153842-3kfms6b",
					"Type": "NodeListItem",
					"ListData": {
						"Typ": 1,
						"Delimiter": 46,
						"Marker": "NC4=",
						"Num": 4
					},
					"Properties": {
						"id": "20230107153842-3kfms6b",
						"updated": "20230107153842"
					},
					"Children": [
						{
							"ID": "20230107153842-0j1mo6h",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20230107153842-0j1mo6h",
								"updated": "20230107153842"
							},
							"Children": [
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "Producer提示“No Topic Route Info”，如何诊断？"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "当您尝试将消息发送到一个路由信息对生产者不可用的主题时，就会发生这种情况。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "1）确保生产者可以连接到名称服务器并且能够从中获取路由元信息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "2）确保名称服务器确实包含主题的路由元信息。 您可以使用管理工具或 Web 控制台通过 topicRoute 从名称服务器查询路由元信息。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "3）确保您的Broker将心跳发送到您的生产者正在连接的同一name server列表。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "4）确保主题的权限为6(rw-)，或至少为2(-w-)。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "\n"
								},
								{
									"Type": "NodeStrong",
									"Data": "strong",
									"Children": [
										{
											"Type": "NodeStrongA6kOpenMarker",
											"Data": "**"
										},
										{
											"Type": "NodeText",
											"Data": "如果找不到此主题，请通过管理工具命令updateTopic或Web控制台在Broker上创建它。"
										},
										{
											"Type": "NodeStrongA6kCloseMarker",
											"Data": "**"
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20230107153846-rwpigls",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20230107153846-rwpigls"
			}
		}
	]
}