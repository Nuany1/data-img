{
	"ID": "20220915121359-md1t6a6",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220915121359-md1t6a6",
		"scroll": "{\u0026amp;quot;startId\u0026amp;quot;:\u0026amp;quot;20220915121359-11j5rhe\u0026amp;quot;,\u0026amp;quot;endId\u0026amp;quot;:\u0026amp;quot;20220915121359-11j5rhe\u0026amp;quot;,\u0026amp;quot;scrollTop\u0026amp;quot;:0}",
		"title": "Ribbon 初始化配置",
		"updated": "20220915122913"
	},
	"Children": [
		{
			"ID": "20220915121843-8sjwfsy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915121843-8sjwfsy",
				"updated": "20220915122719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、Ribbon 自动配置"
				}
			]
		},
		{
			"ID": "20220915121843-1odw2x2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915121843-1odw2x2",
				"updated": "20220915122225"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Ribbon自动配置类：org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration"
				}
			]
		},
		{
			"ID": "20220915121843-lkmc643",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915121843-lkmc643",
				"updated": "20220915122419"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当SpringBoot程序启动,自动配置扫描会加载该类注册到Spring容器中"
				}
			]
		},
		{
			"ID": "20220915121843-fn72uje",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915121843-fn72uje",
				"updated": "20220915122913"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Configuration\n@Conditional({RibbonClassesConditions.class}) // 条件\n@RibbonClients\n// 在当前配置类初始化之后\n@AutoConfigureAfter(name = {\"org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration\"})\n// 在当前配置类初始化之前\n@AutoConfigureBefore({LoadBalancerAutoConfiguration.class, AsyncLoadBalancerAutoConfiguration.class})\n// 加载配置\n@EnableConfigurationProperties({RibbonEagerLoadProperties.class, ServerIntrospectorProperties.class})\n// 条件\n@ConditionalOnProperty(\n    value = {\"spring.cloud.loadbalancer.ribbon.enabled\"},havingValue = \"true\",matchIfMissing = true)\npublic class RibbonAutoConfiguration {\n    // RibbonClient客户端指定的配置，有多少个Ribbon客户端这里就会有多少个RibbonClientSpecification\n    @Autowired(required = false)\n    private List\u003cRibbonClientSpecification\u003e configurations = new ArrayList();\n    @Autowired\n    private RibbonEagerLoadProperties ribbonEagerLoadProperties;\n\n    public RibbonAutoConfiguration() {\n    }\n\n    @Bean\n    public HasFeatures ribbonFeature() {\n        return HasFeatures.namedFeature(\"Ribbon\", Ribbon.class);\n    }\n    // 创建RibbonClient的ApplicationContext上下文，并创建RibbonClient相关组件如IClient、ILoadbalancer等\n    @Bean\n    @ConditionalOnMissingBean\n    public SpringClientFactory springClientFactory() {\n        SpringClientFactory factory = new SpringClientFactory();\n        factory.setConfigurations(this.configurations);\n        return factory;\n    }\n    //注册了LoadBalancerClient ，负载均衡客户端，很重要的一个类\n    @Bean\n    @ConditionalOnMissingBean({LoadBalancerClient.class})\n    public LoadBalancerClient loadBalancerClient() {\n        return new RibbonLoadBalancerClient(this.springClientFactory());\n    }\n    //创建LoadBalancedRetryPolicy的工厂，负载均衡重试功能\n    @Bean\n    // 重试条件\n    @ConditionalOnClass(name = {\"org.springframework.retry.support.RetryTemplate\"})\n    @ConditionalOnMissingBean\n    public LoadBalancedRetryFactory loadBalancedRetryPolicyFactory(final SpringClientFactory clientFactory) {\n        return new RibbonLoadBalancedRetryFactory(clientFactory);\n    }\n\n    @Bean\n    @ConditionalOnMissingBean\n    public PropertiesFactory propertiesFactory() {\n        return new PropertiesFactory();\n    }\n\n    @Bean\n    @ConditionalOnProperty({\"ribbon.eager-load.enabled\"})\n    public RibbonApplicationContextInitializer ribbonApplicationContextInitializer() {\n        return new RibbonApplicationContextInitializer(this.springClientFactory(), this.ribbonEagerLoadProperties.getClients());\n    }\n\n    static class RibbonClassesConditions extends AllNestedConditions {\n        RibbonClassesConditions() {\n            super(ConfigurationPhase.PARSE_CONFIGURATION);\n        }\n\n        @ConditionalOnClass({Ribbon.class})\n        static class RibbonPresent {\n            RibbonPresent() {\n            }\n        }\n\n        @ConditionalOnClass({AsyncRestTemplate.class})\n        static class AsyncRestTemplatePresent {\n            AsyncRestTemplatePresent() {\n            }\n        }\n\n        @ConditionalOnClass({RestTemplate.class})\n        static class RestTemplatePresent {\n            RestTemplatePresent() {\n            }\n        }\n\n        @ConditionalOnClass({IClient.class})\n        static class IClientPresent {\n            IClientPresent() {\n            }\n        }\n    }\n\n    private static class OnRibbonRestClientCondition extends AnyNestedCondition {\n        OnRibbonRestClientCondition() {\n            super(ConfigurationPhase.REGISTER_BEAN);\n        }\n\n        @ConditionalOnProperty({\"ribbon.restclient.enabled\"})\n        static class RibbonProperty {\n            RibbonProperty() {\n            }\n        }\n\n        /** @deprecated */\n        @Deprecated\n        @ConditionalOnProperty({\"ribbon.http.client.enabled\"})\n        static class ZuulProperty {\n            ZuulProperty() {\n            }\n        }\n    }\n\n    @Target({ElementType.TYPE, ElementType.METHOD})\n    @Retention(RetentionPolicy.RUNTIME)\n    @Documented\n    @Conditional({OnRibbonRestClientCondition.class})\n    @interface ConditionalOnRibbonRestClient {\n    }\n\n    @Configuration(\n        proxyBeanMethods = false\n    )\n    @ConditionalOnClass({HttpRequest.class})\n    @RibbonAutoConfiguration.ConditionalOnRibbonRestClient\n    protected static class RibbonClientHttpRequestFactoryConfiguration {\n        @Autowired\n        private SpringClientFactory springClientFactory;\n\n        protected RibbonClientHttpRequestFactoryConfiguration() {\n        }\n\n        @Bean\n        public RestTemplateCustomizer restTemplateCustomizer(final RibbonClientHttpRequestFactory ribbonClientHttpRequestFactory) {\n            return (restTemplate) -\u003e {\n                restTemplate.setRequestFactory(ribbonClientHttpRequestFactory);\n            };\n        }\n\n        @Bean\n        public RibbonClientHttpRequestFactory ribbonClientHttpRequestFactory() {\n            return new RibbonClientHttpRequestFactory(this.springClientFactory);\n        }\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915121843-91wsy3w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915121843-91wsy3w",
				"updated": "20220915121843"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "ZoneAwareLoadBalancer的父类是"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "DynamicServerListLoadBalancer"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "，DynamicServerListLoadBalancer构造函数中会调用"
				},
				{
					"Type": "NodeCodeSpan",
					"Data": "code",
					"Children": [
						{
							"Type": "NodeCodeSpanOpenMarker"
						},
						{
							"Type": "NodeCodeSpanContent",
							"Data": "restOfInit()"
						},
						{
							"Type": "NodeCodeSpanCloseMarker"
						}
					]
				},
				{
					"Type": "NodeText",
					"Data": "方法（其中会获取到所有的服务实例）"
				}
			]
		},
		{
			"ID": "20220915122341-o9jkf5j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915122341-o9jkf5j"
			}
		}
	]
}