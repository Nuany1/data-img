{
	"ID": "20220819111223-exfvuqc",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220819111223-exfvuqc",
		"scroll": "{\u0026amp;quot;startId\u0026amp;quot;:\u0026amp;quot;20220819111223-fwu6pff\u0026amp;quot;,\u0026amp;quot;endId\u0026amp;quot;:\u0026amp;quot;20220924152211-g1og4o9\u0026amp;quot;,\u0026amp;quot;scrollTop\u0026amp;quot;:3085,\u0026amp;quot;focusId\u0026amp;quot;:\u0026amp;quot;20220924152228-qccgcfv\u0026amp;quot;,\u0026amp;quot;focusStart\u0026amp;quot;:211,\u0026amp;quot;focusEnd\u0026amp;quot;:211}",
		"title": "Json",
		"updated": "20220924152822"
	},
	"Children": [
		{
			"ID": "20220819111223-fwu6pff",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220819111223-fwu6pff",
				"updated": "20220924151035"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、前言"
				}
			]
		},
		{
			"ID": "20220924151036-vmf3vu8",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924151036-vmf3vu8",
				"updated": "20220924151045"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Jackson和Fastjson都是比较出名的JSON解析库，SpringMVC默认使用的是Jackson，而且在企业项目中也大多使用的是Jackson，感觉还是很有必要熟悉Jackson的基本使用的。"
				}
			]
		},
		{
			"ID": "20220924151046-1ortn58",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220924151046-1ortn58",
				"updated": "20220924151117"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、引入Jackson"
				}
			]
		},
		{
			"ID": "20220924151140-hnergmu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924151140-hnergmu",
				"updated": "20220924151145"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果是使用了SpringBoot的项目，引入spring-boot-starter-web就会自动引入Jackson。"
				}
			]
		},
		{
			"ID": "20220924151118-d3twsqd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151118-d3twsqd",
				"updated": "20220924151138"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "eG1s"
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "        \u003cdependency\u003e\n            \u003cgroupId\u003ecom.fasterxml.jackson.core\u003c/groupId\u003e\n            \u003cartifactId\u003ejackson-databind\u003c/artifactId\u003e\n            \u003cversion\u003e2.13.1\u003c/version\u003e\n        \u003c/dependency\u003e\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151146-i4wxl1t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220924151146-i4wxl1t",
				"updated": "20220924151158"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、ObjectMapper"
				}
			]
		},
		{
			"ID": "20220924151159-ao0xjq1",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924151159-ao0xjq1",
				"updated": "20220924151207"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们使用Jackson等工具时，最常见的场景就是JSON的序列化和反序列化。而Jackson最常用的的就是ObjectMapper, 它提供了丰富的方法。"
				}
			]
		},
		{
			"ID": "20220924151207-69f3cdl",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220924151207-69f3cdl",
				"updated": "20220924151224"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、创建ObjectMapper"
				}
			]
		},
		{
			"ID": "20220924151225-gn16qha",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151225-gn16qha",
				"updated": "20220924151247"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Autowired\nprivate ObjectMapper objectMapper;\nprivate ObjectMapper mapper = new ObjectMapper();\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151248-nou4cuy",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220924151248-nou4cuy",
				"updated": "20220924151258"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2、序列化"
				}
			]
		},
		{
			"ID": "20220924151329-z5w8crb",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151329-z5w8crb",
				"updated": "20220924151342"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.1、java对象转JSON"
				}
			]
		},
		{
			"ID": "20220924151344-r3dxeti",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151344-r3dxeti",
				"updated": "20220924151356"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Student student = getStudent();\nString studentStr = mapper.writeValueAsString(student);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151326-8o3bkiz",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151326-8o3bkiz",
				"updated": "20220924151409"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.2、Java List 转 JSON"
				}
			]
		},
		{
			"ID": "20220924151410-lu7fkts",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151410-lu7fkts",
				"updated": "20220924151430"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "List\u003cStudent\u003e studentList= getStudentList();\nString studentListStr = mapper.writeValueAsString(studentList);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151409-qdht744",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151409-qdht744",
				"updated": "20220924151514"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.3、Java Map 转 JSON"
				}
			]
		},
		{
			"ID": "20220924151439-aih4q7j",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151439-aih4q7j",
				"updated": "20220924151459"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Map\u003cString, Object\u003e studentMap = new HashMap\u003c\u003e();\nstudentMap.put(\"id\", \"1\");\nstudentMap.put(\"name\", \"亚瑟\");\nstudentMap.put(\"age\", 33);\n\nString studentJsonStr = mapper.writeValueAsString(studentMap);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151501-6v4i7zt",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151501-6v4i7zt",
				"updated": "20220924151511"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.4、 美化输出格式"
				}
			]
		},
		{
			"ID": "20220924151515-8fh1fvv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151515-8fh1fvv",
				"updated": "20220924151536"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "// 在调writeValueAsString之前先调writerWithDefaultPrettyPrinter\nString studentStr = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(student);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151538-9uf7zf2",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151538-9uf7zf2",
				"updated": "20220924151552"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "2.5、 序列化结果写文件"
				}
			]
		},
		{
			"ID": "20220924151553-p1xrz8k",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151553-p1xrz8k",
				"updated": "20220924151607"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "mapper.writeValue(new File(filePath), student);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151608-b3fun1b",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220924151608-b3fun1b",
				"updated": "20220924151621"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3、反序列化"
				}
			]
		},
		{
			"ID": "20220924151622-brw827v",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151622-brw827v",
				"updated": "20220924151636"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.1、 JSON 转 Java对象"
				}
			]
		},
		{
			"ID": "20220924151637-5tf2t1y",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151637-5tf2t1y",
				"updated": "20220924151646"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "String studentStr = getStudentString();\nStudent student = mapper.readValue(studentStr, Student.class);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151647-stwzsjt",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151647-stwzsjt",
				"updated": "20220924151658"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.2、 JSON 转 Java List"
				}
			]
		},
		{
			"ID": "20220924151700-k33v8x7",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151700-k33v8x7",
				"updated": "20220924151722"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "List\u003cStudent\u003e studentList1 = mapper.readValue(studentListStr , new TypeReference\u003c\u003e() {});\n或者\nList\u003cStudent\u003e studentList2 = Arrays.asList(mapper.readValue(studentListStr, Student[].class));\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151726-r0f7lbw",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151726-r0f7lbw",
				"updated": "20220924151739"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.3、 JSON 转 Java Map"
				}
			]
		},
		{
			"ID": "20220924151740-3dn4fsq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151740-3dn4fsq",
				"updated": "20220924151748"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "HashMap studentMap = mapper.readValue(studentStr, HashMap.class);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151804-bdxwr0r",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151804-bdxwr0r",
				"updated": "20220924151808"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.4、 JSON File 转 Java对象"
				}
			]
		},
		{
			"ID": "20220924151809-lfht2qv",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151809-lfht2qv",
				"updated": "20220924151823"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "File file = new File(filePath);\nStudent student = mapper.readValue(file, Student.class);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151834-7o0tya6",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151834-7o0tya6",
				"updated": "20220924151838"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.5、 JSON Reader 转 Java对象"
				}
			]
		},
		{
			"ID": "20220924151839-irnwgqn",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151839-irnwgqn",
				"updated": "20220924151859"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "File file = new File(filePath);\nReader reader = new java.io.FileReader(file);\nStudent student = mapper.readValue(reader, Student.class);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151908-z5y8xv4",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151908-z5y8xv4",
				"updated": "20220924151912"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.6、 JSON InputStream 转 Java对象"
				}
			]
		},
		{
			"ID": "20220924151913-c115a8z",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151913-c115a8z",
				"updated": "20220924151921"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "InputStream inputStream = new FileInputStream(OBJECT_FILE_PATH_FROM_SRC);\nStudent student = mapper.readValue(inputStream, Student.class);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924151931-4yrs1lb",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924151931-4yrs1lb",
				"updated": "20220924151947"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.7、JSON Byte Array 转 Java对象"
				}
			]
		},
		{
			"ID": "20220924151930-03d7jd9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924151930-03d7jd9",
				"updated": "20220924151956"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "Student student = mapper.readValue(studentStr.getBytes(StandardCharsets.UTF_8), Student.class);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924152002-r0lljhk",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924152002-r0lljhk",
				"updated": "20220924152005"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "3.8、 JSON via URL 转 Java对象"
				}
			]
		},
		{
			"ID": "20220924152006-g3co3u8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924152006-g3co3u8",
				"updated": "20220924152016"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "URL url = new URL(\"file:\" + OBJECT_FILE_PATH_FROM_SRC);\nStudent student6 = mapper.readValue(url, Student.class);\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924152018-l5l26g5",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220924152018-l5l26g5",
				"updated": "20220924152032"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "三、Jackson注解"
				}
			]
		},
		{
			"ID": "20220924152033-2ssg77r",
			"Type": "NodeHeading",
			"HeadingLevel": 3,
			"Properties": {
				"id": "20220924152033-2ssg77r",
				"updated": "20220924152045"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1、序列化/反序列化都生效注解"
				}
			]
		},
		{
			"ID": "20220924152050-4o3mnat",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924152050-4o3mnat",
				"updated": "20220924152055"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.1、 @JsonIgnore"
				}
			]
		},
		{
			"ID": "20220924152044-rc0cct0",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924152044-rc0cct0",
				"updated": "20220924152103"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "工作中一般会修饰Java类的属性上，无论序列化还是反序列化，Jackson都会忽略这个属性。\n举个例子：@JsonIgnore修饰id属性"
				}
			]
		},
		{
			"ID": "20220924152104-l8lpz9f",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924152104-l8lpz9f",
				"updated": "20220924152159"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class StudentTestForJsonIgnore {\n    // 忽略id属性\n    @JsonIgnore\n    private String id;\n\n    private String name;\n  \n    //注意得用Integer，而不能用int\n    private Integer age;\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924152201-id1zu3b",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924152201-id1zu3b",
				"updated": "20220924152210"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.2、 @JsonIgnoreProperties"
				}
			]
		},
		{
			"ID": "20220924152228-qccgcfv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924152228-qccgcfv",
				"updated": "20220924152231"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@JsonIgnoreProperties的作用和@JsonIgnore类似，但是@JsonIgnoreProperties修饰在Java类上，它可设置忽略多个属性，且可以设置ignoreUnknown = true，反序列化时，忽略在JSON中存在，但在Java类中不存在的字段，而不报异常。\n举个例子：@JsonIgnoreProperties设置了\"id\", “age”，且设ignoreUnknown = true"
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220924152211-g1og4o9",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924152211-g1og4o9",
				"updated": "20220924152636"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@JsonIgnoreProperties(value = {\"id\", \"age\"}, ignoreUnknown = true)\npublic class StudentTestForJsonIgnoreProperties {\n    // 被忽略\n    private String id;\n\n    private String name;\n    // 被忽略\n    private Integer age;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924152518-tax6bfd",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924152518-tax6bfd",
				"updated": "20220924152525"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.3、 @JsonIgnoreType"
				}
			]
		},
		{
			"ID": "20220924152526-213w0uh",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924152526-213w0uh",
				"updated": "20220924152533"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当其他类有该类作为属性时，该属性将被忽略。\n举例：关于Student的类，添加了englishName属性。"
				}
			]
		},
		{
			"ID": "20220924152534-cgdencc",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924152534-cgdencc",
				"updated": "20220924152624"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class StudentTestForJsonIgnoreType {\n\n    private String id;\n\n    private String name;\n    // 被忽略\n    private EnglishName englishName;\n\n    private Integer age;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924152557-shkwvlq",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924152557-shkwvlq",
				"updated": "20220924152558"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "EnglishName 类定义如下，用@JsonIgnoreType修饰"
				}
			]
		},
		{
			"ID": "20220924152559-66cn5gg",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924152559-66cn5gg",
				"updated": "20220924152618"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@JsonIgnoreType \npublic class EnglishName {\n    public String firstName;\n    public String lastName;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924152647-z543j41",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924152647-z543j41",
				"updated": "20220924152652"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.4、 @JsonProperty"
				}
			]
		},
		{
			"ID": "20220924152701-hu14huv",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924152701-hu14huv",
				"updated": "20220924152702"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "如果JSON中字段名和Java类中的属性名不一致时，可以用@JsonProperty修饰在属性上。"
				}
			]
		},
		{
			"ID": "20220924152653-fiacwc4",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924152653-fiacwc4",
				"updated": "20220924152712"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class StudentTestForJsonProperty {\n\n    private String id;\n\n    @JsonProperty(\"studentName\")\n    private String name;\n\n    private Integer age;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220924152737-qi8j3w2",
			"Type": "NodeHeading",
			"HeadingLevel": 4,
			"Properties": {
				"id": "20220924152737-qi8j3w2",
				"updated": "20220924152746"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "1.5、 @JsonAnyGetter和@JsonAnySetter"
				}
			]
		},
		{
			"ID": "20220924152756-97gpwdu",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924152756-97gpwdu",
				"updated": "20220924152756"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@JsonAnyGetter\n1.方法是非静态，没有参数的,方法名随意\n2.方法返回值必须是Map类型\n3.在一个实体类中仅仅用在一个方法上\n4.序列化的时候json字段的key就是返回Map的key,value就是Map的value"
				}
			]
		},
		{
			"ID": "20220924152756-rqwml3w",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220924152756-rqwml3w",
				"updated": "20220924152759"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "@JsonAnySetter\n1.用在非静态方法上，注解的方法必须有两个参数，第一个是json字段中的key，第二个是value，方法名随意\n2.也可以用在Map对象属性上面，建议用在Map对象属性上面\n3.反序列化的时候将对应不上的字段全部放到Map里面"
				},
				{
					"Type": "NodeBr",
					"Data": "br"
				}
			]
		},
		{
			"ID": "20220924152747-t8fps6i",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220924152747-t8fps6i",
				"updated": "20220924152822"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class StudentTestForJsonGetSet {\n\n    private String id;\n\n    private String name;\n\n    private Integer age;\n\n    private Map\u003cString, Object\u003e otherAttributes = new HashMap\u003c\u003e();\n\n    @JsonAnyGetter\n    public Map\u003cString, Object\u003e getOtherAttributes() {\n        return this.otherAttributes;\n    }\n\n    @JsonAnySetter\n    public void setOtherAttributes(String name, Object value) {\n        this.otherAttributes.put(name, value);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}