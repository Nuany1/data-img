{
	"ID": "20220915121359-md1t6a6",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220915121359-md1t6a6",
		"scroll": "{\u0026amp;quot;startId\u0026amp;quot;:\u0026amp;quot;20220915121359-11j5rhe\u0026amp;quot;,\u0026amp;quot;endId\u0026amp;quot;:\u0026amp;quot;20220915121359-11j5rhe\u0026amp;quot;,\u0026amp;quot;scrollTop\u0026amp;quot;:0}",
		"title": "Ribbon 初始化配置",
		"updated": "20220915163922"
	},
	"Children": [
		{
			"ID": "20220915121843-8sjwfsy",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915121843-8sjwfsy",
				"updated": "20220915122719"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、Ribbon 自动配置"
				}
			]
		},
		{
			"ID": "20220915121843-1odw2x2",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915121843-1odw2x2",
				"updated": "20220915122225"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "Ribbon自动配置类：org.springframework.cloud.netflix.ribbon.RibbonAutoConfiguration"
				}
			]
		},
		{
			"ID": "20220915121843-lkmc643",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915121843-lkmc643",
				"updated": "20220915122419"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "当SpringBoot程序启动,自动配置扫描会加载该类注册到Spring容器中"
				}
			]
		},
		{
			"ID": "20220915121843-fn72uje",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915121843-fn72uje",
				"updated": "20220915163044"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "@Configuration\n@Conditional({RibbonClassesConditions.class}) // 条件\n@RibbonClients\n// 在当前配置类初始化之后\n@AutoConfigureAfter(name = {\"org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration\"})\n// 在当前配置类初始化之前\n@AutoConfigureBefore({LoadBalancerAutoConfiguration.class, AsyncLoadBalancerAutoConfiguration.class})\n// 加载配置\n@EnableConfigurationProperties({RibbonEagerLoadProperties.class, ServerIntrospectorProperties.class})\n// 条件\n@ConditionalOnProperty(\n    value = {\"spring.cloud.loadbalancer.ribbon.enabled\"},havingValue = \"true\",matchIfMissing = true)\npublic class RibbonAutoConfiguration {\n    // RibbonClient客户端指定的配置，有多少个Ribbon客户端这里就会有多少个RibbonClientSpecification\n    @Autowired(required = false)\n    private List\u003cRibbonClientSpecification\u003e configurations = new ArrayList();\n    @Autowired\n    private RibbonEagerLoadProperties ribbonEagerLoadProperties;\n\n    public RibbonAutoConfiguration() {\n    }\n\n    @Bean\n    public HasFeatures ribbonFeature() {\n        return HasFeatures.namedFeature(\"Ribbon\", Ribbon.class);\n    }\n    // 创建RibbonClient的ApplicationContext上下文，并创建RibbonClient相关组件如IClient、ILoadbalancer等\n    // 为每个客户机名称创建一个Spring ApplicationContext\n    @Bean\n    @ConditionalOnMissingBean\n    public SpringClientFactory springClientFactory() {\n        SpringClientFactory factory = new SpringClientFactory();\n        factory.setConfigurations(this.configurations);\n        return factory;\n    }\n    //注册了LoadBalancerClient ，负载均衡客户端，很重要的一个类\n    @Bean\n    @ConditionalOnMissingBean({LoadBalancerClient.class})\n    public LoadBalancerClient loadBalancerClient() {\n        return new RibbonLoadBalancerClient(this.springClientFactory());\n    }\n    //创建LoadBalancedRetryPolicy的工厂，负载均衡重试功能\n    @Bean\n    // 重试条件，必须配置RetryTemplate\n    @ConditionalOnClass(name = {\"org.springframework.retry.support.RetryTemplate\"})\n    @ConditionalOnMissingBean\n    public LoadBalancedRetryFactory loadBalancedRetryPolicyFactory(final SpringClientFactory clientFactory) {\n        return new RibbonLoadBalancedRetryFactory(clientFactory);\n    }\n    //如果配置了eager-load饥饿加载，就注册RibbonApplicationContextInitializer 上下文初始化对象，\n    //然后在ApplicationReadyEvent事件之后会立马初始化上下文\n    @Bean\n    @ConditionalOnProperty({\"ribbon.eager-load.enabled\"})\n    public RibbonApplicationContextInitializer ribbonApplicationContextInitializer() {\n        return new RibbonApplicationContextInitializer(this.springClientFactory(), this.ribbonEagerLoadProperties.getClients());\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915123208-yd0xnj0",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915123208-yd0xnj0",
				"updated": "20220915123208"
			},
			"Children": [
				{
					"ID": "20220915162630-dt5jqxp",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915162630-dt5jqxp"
					},
					"Children": [
						{
							"ID": "20220915162630-87oa0ao",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915162630-87oa0ao",
								"updated": "20220915163112"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "SpringClientFactory：用来给Ribbon客户端创建上下文和配置，它为每个客户机名称创建一个Spring "
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "ApplicationContext"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，并创建好RibbonClient客户端相关的bean和配置，如：ILoadBalancer，IClientConfig，RibbonLoadBalancerContext。注意：是会为每个客户端都会做一个套配置"
								},
								{
									"Type": "NodeBr",
									"Data": "br"
								}
							]
						}
					]
				},
				{
					"ID": "20220915123208-lfajv62",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915123208-lfajv62",
						"updated": "20220915123208"
					},
					"Children": [
						{
							"ID": "20220915123208-lpko54f",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915123208-lpko54f",
								"updated": "20220915123348"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "LoadBalancerClient ：负载均衡客户端，RibbonLoadBalancerClient是对LoadBalancerClient的实现，exec方法包含了负载均衡的功能，Ribbon做负载均衡时用的就是它"
								}
							]
						}
					]
				},
				{
					"ID": "20220915123359-qscqzaj",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915123359-qscqzaj"
					},
					"Children": [
						{
							"ID": "20220915123359-dy6hajc",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915123359-dy6hajc",
								"updated": "20220915123359"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "RibbonEagerLoadProperties：用来加载“饥饿加载”配置"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "ribbon.eager-load.enabled"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，指定些哪些RibonClient需要迫切初始化"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915163144-r95m0jc",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220915163144-r95m0jc",
				"updated": "20220915163203"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、SpringClientFactory Ribbon上下文初始化"
				}
			]
		},
		{
			"ID": "20220915163204-8q3qid9",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915163204-8q3qid9",
				"updated": "20220915163509"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "SpringClientFactory用来给Ribbon客户端创建上下文和配置，它为每个客户机名称创建一个Spring ApplicationContext，并创建好RibbonClient客户端相关的bean和配置"
				}
			]
		},
		{
			"ID": "20220915163145-aqhf0rs",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915163145-aqhf0rs",
				"updated": "20220915163145"
			},
			"Children": [
				{
					"ID": "20220915163500-0xx56c8",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915163500-0xx56c8"
					},
					"Children": [
						{
							"ID": "20220915163500-7ytcb00",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915163500-7ytcb00",
								"updated": "20220915163505"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "openFeign 在LoadBalancerFeignClient#execute 中通过getClientConfig(clientName) 初始化客户端的上下文信息。"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915163527-crtwlq8",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220915163527-crtwlq8",
				"updated": "20220915163922"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public class SpringClientFactory extends NamedContextFactory\u003cRibbonClientSpecification\u003e {\n    static final String NAMESPACE = \"ribbon\";\n\n    public SpringClientFactory() {\n        //ribbon的客户端配置RibbonClientConfiguration,Ribbon默认配置类的类型 (很重要) \n        //上下文通过当前配置类来初始化\n        super(RibbonClientConfiguration.class, \"ribbon\", \"ribbon.client.name\");\n    }\n    // Ribbon的客户端上下文对象中(AnnotationConfigApplicationContext)根据name和type获取一个Bean的实例\n    public \u003cC extends IClient\u003c?, ?\u003e\u003e C getClient(String name, Class\u003cC\u003e clientClass) {\n        return (IClient)this.getInstance(name, clientClass);\n    }\n    // 根据Ribbon客户端的服务名，获取客户端的ILoadBalancer对象\n    public ILoadBalancer getLoadBalancer(String name) {\n        return (ILoadBalancer)this.getInstance(name, ILoadBalancer.class);\n    }\n    // 根据Ribbon客户端的服务名，获取客户端的配置对象，默认实现是DefaultClientConfigImpl\n    public IClientConfig getClientConfig(String name) {\n        return (IClientConfig)this.getInstance(name, IClientConfig.class);\n    }\n    // 根据Ribbon客户端的服务名，获取RibbonLoadBalancerContext 负载均衡器的上下文对象\n    public RibbonLoadBalancerContext getLoadBalancerContext(String serviceId) {\n        return (RibbonLoadBalancerContext)this.getInstance(serviceId, RibbonLoadBalancerContext.class);\n    }\n   \n    static \u003cC\u003e C instantiateWithConfig(Class\u003cC\u003e clazz, IClientConfig config) {\n        return instantiateWithConfig((AnnotationConfigApplicationContext)null, clazz, config);\n    }\n\n    static \u003cC\u003e C instantiateWithConfig(AnnotationConfigApplicationContext context, Class\u003cC\u003e clazz, IClientConfig config) {\n        C result = null;\n\n        try {\n            Constructor\u003cC\u003e constructor = clazz.getConstructor(IClientConfig.class);\n            result = constructor.newInstance(config);\n        } catch (Throwable var5) {\n        }\n\n        if (result == null) {\n            result = BeanUtils.instantiateClass(clazz);\n            if (result instanceof IClientConfigAware) {\n                ((IClientConfigAware)result).initWithNiwsConfig(config);\n            }\n\n            if (context != null) {\n                context.getAutowireCapableBeanFactory().autowireBean(result);\n            }\n        }\n\n        return result;\n    }\n\n    public \u003cC\u003e C getInstance(String name, Class\u003cC\u003e type) {\n        C instance = super.getInstance(name, type);\n        if (instance != null) {\n            return instance;\n        } else {\n            IClientConfig config = (IClientConfig)this.getInstance(name, IClientConfig.class);\n            return instantiateWithConfig(this.getContext(name), type, config);\n        }\n    }\n\n    protected AnnotationConfigApplicationContext getContext(String name) {\n        return super.getContext(name);\n    }\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220915163527-89r5mkd",
			"Type": "NodeList",
			"ListData": {},
			"Properties": {
				"id": "20220915163527-89r5mkd",
				"updated": "20220915163527"
			},
			"Children": [
				{
					"ID": "20220915123215-5vlu8xy",
					"Type": "NodeListItem",
					"ListData": {
						"BulletChar": 42,
						"Marker": "Kg=="
					},
					"Properties": {
						"id": "20220915123215-5vlu8xy"
					},
					"Children": [
						{
							"ID": "20220915123215-8t2xpx3",
							"Type": "NodeParagraph",
							"Properties": {
								"id": "20220915123215-8t2xpx3",
								"updated": "20220915123254"
							},
							"Children": [
								{
									"Type": "NodeText",
									"Data": "ZoneAwareLoadBalancer的父类是"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "DynamicServerListLoadBalancer"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "，DynamicServerListLoadBalancer构造函数中会调用"
								},
								{
									"Type": "NodeCodeSpan",
									"Data": "code",
									"Children": [
										{
											"Type": "NodeCodeSpanOpenMarker"
										},
										{
											"Type": "NodeCodeSpanContent",
											"Data": "restOfInit()"
										},
										{
											"Type": "NodeCodeSpanCloseMarker"
										}
									]
								},
								{
									"Type": "NodeText",
									"Data": "方法（其中会获取到所有的服务实例）"
								}
							]
						}
					]
				}
			]
		},
		{
			"ID": "20220915122341-o9jkf5j",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220915122341-o9jkf5j"
			}
		}
	]
}