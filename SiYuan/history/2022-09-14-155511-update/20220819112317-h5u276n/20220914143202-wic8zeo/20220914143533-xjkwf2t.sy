{
	"ID": "20220914143533-xjkwf2t",
	"Type": "NodeDocument",
	"Properties": {
		"id": "20220914143533-xjkwf2t",
		"title": "Nacos 注册",
		"updated": "20220914155437"
	},
	"Children": [
		{
			"ID": "20220914143533-1orch5b",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220914143533-1orch5b",
				"updated": "20220914145029"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "一、Spring-cloud 自动注册"
				}
			]
		},
		{
			"ID": "20220914143706-wfwao5s",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220914143706-wfwao5s",
				"updated": "20220914143748"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\tnacos服务注册表结构：Map\u003cnamespace, Map\u003cgroup::serviceName, Service\u003e\u003e"
				}
			]
		},
		{
			"ID": "20220914143742-iuc9t20",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220914143742-iuc9t20",
				"updated": "20220914144540"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\tSpring-cloud中客户端向服务端发送注册：NacosServiceRegistryAutoConfiguration 配置类"
				}
			]
		},
		{
			"ID": "20220914144513-ee3p3kd",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220914144513-ee3p3kd",
				"updated": "20220914144647"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "    public NacosAutoServiceRegistration(ServiceRegistry\u003cRegistration\u003e serviceRegistry, AutoServiceRegistrationProperties autoServiceRegistrationProperties, NacosRegistration registration) {\n        // 父类先初始化。\n\tsuper(serviceRegistry, autoServiceRegistrationProperties);\n        this.registration = registration;\n    }\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220914144652-k3xudfk",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220914144652-k3xudfk",
				"updated": "20220914144727"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "我们看到父类实现了 ApplicationListener 接口，而实现该接口必须重新其 onApplicationEvent() 方法，我们看到方法中又调用了 bind() 方法"
				}
			]
		},
		{
			"ID": "20220914144728-vkmbyvy",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220914144728-vkmbyvy",
				"updated": "20220914145448"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public void bind(WebServerInitializedEvent event) {\n  ApplicationContext context = event.getApplicationContext();\n  if (!(context instanceof ConfigurableWebServerApplicationContext) || !\"management\".equals(((ConfigurableWebServerApplicationContext)context).getServerNamespace())) {\n        // cas 原子操作\n\tthis.port.compareAndSet(0, event.getWebServer().getPort());\n       this.start();\n   }\n}\n// \npublic void start() {\n   if (!isEnabled()) {\n      if (logger.isDebugEnabled()) {\n         logger.debug(\"Discovery Lifecycle disabled. Not starting\");\n      }\n      return;\n   }\n   if (!this.running.get()) {\n      this.context.publishEvent(new InstancePreRegisteredEvent(this, getRegistration()));\n      // 开始注册\n      register();\n      if (shouldRegisterManagement()) {\n         registerManagement();\n      }\n      this.context.publishEvent(new InstanceRegisteredEvent\u003c\u003e(this, getConfiguration()));\n      this.running.compareAndSet(false, true);\n   }\n\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220914145553-t7f0647",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220914145553-t7f0647",
				"updated": "20220914145555"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "com.alibaba.cloud.nacos.registry.NacosServiceRegistry#register"
				}
			]
		},
		{
			"ID": "20220914152801-xh3pkxn",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220914152801-xh3pkxn",
				"updated": "20220914152848"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "在2.0版本之后客户端可以通过http请求方式和Grpc两种方式和服务端进行通信"
				}
			]
		},
		{
			"ID": "20220914145557-9qfzvvz",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220914145557-9qfzvvz",
				"updated": "20220914153033"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "\npublic void register(Registration registration) {\n  if (StringUtils.isEmpty(registration.getServiceId())) {\n    log.warn(\"No service to register for nacos client...\");\n  } else {\n    NamingService namingService = this.namingService();\n    String serviceId = registration.getServiceId();\n    String group = this.nacosDiscoveryProperties.getGroup();\n    Instance instance = this.getNacosInstanceFromRegistration(registration);\n    try {\n      // 把 serviceId 和 instance传入，开始注册流程\n      namingService.registerInstance(serviceId, group, instance);\n      log.info(\"nacos registry, {} {} {}:{} register finished\", new Object[]{group, serviceId, instance.getIp(), instance.getPort()});\n    } catch (Exception var7) {\n      if (this.nacosDiscoveryProperties.isFailFast()) {\n      log.error(\"nacos registry, {} register failed...{},\", new Object[]{serviceId, registration.toString(), var7});\n      ReflectionUtils.rethrowRuntimeException(var7);\n      } else {\n          log.warn(\"Failfast is false. {} register failed...{},\", new Object[]{serviceId, registration.toString(), var7});\n        }\n      }\n  }\n}\n\n@Override\npublic void registerService(String serviceName, String groupName, Instance instance) throws NacosException {\n  NAMING_LOGGER.info(\"[REGISTER-SERVICE] {} registering service {} with instance: {}\", namespaceId, serviceName,\n\t\tinstance);\n  String groupedServiceName = NamingUtils.getGroupedName(serviceName, groupName);\n  // 如果是临时实例\n  if (instance.isEphemeral()) {\n\tBeatInfo beatInfo = beatReactor.buildBeatInfo(groupedServiceName, instance);\n\t// 发送心跳因为nacos在此时实现的是cap理论中的ap模式，\n\t//即不保证强一致性，但会保证可用性，这就需要做到动态感知服务的上下线，所以要通过心跳来判断服务是否还正常在线\n\tbeatReactor.addBeatInfo(groupedServiceName, beatInfo);\n  }\n  final Map\u003cString, String\u003e params = new HashMap\u003cString, String\u003e(16);\n  params.put(CommonParams.NAMESPACE_ID, namespaceId);\n  params.put(CommonParams.SERVICE_NAME, groupedServiceName);\n  params.put(CommonParams.GROUP_NAME, groupName);\n  params.put(CommonParams.CLUSTER_NAME, instance.getClusterName());\n  params.put(IP_PARAM, instance.getIp());\n  params.put(PORT_PARAM, String.valueOf(instance.getPort()));\n  params.put(WEIGHT_PARAM, String.valueOf(instance.getWeight()));\n  params.put(\"enable\", String.valueOf(instance.isEnabled()));\n  params.put(HEALTHY_PARAM, String.valueOf(instance.isHealthy()));\n  params.put(EPHEMERAL_PARAM, String.valueOf(instance.isEphemeral()));\n  params.put(META_PARAM, JacksonUtils.toJson(instance.getMetadata()));\n  // 服务注册 路径为/v1/ns/instance\n  reqApi(UtilAndComs.nacosUrlInstance, params, HttpMethod.POST);\n}\n\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220914152020-o4ou7dd",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220914152020-o4ou7dd",
				"updated": "20220914152223"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "发送心跳：com/alibaba/nacos/client/naming/beat/BeatReactor #addBeatInfo"
				}
			]
		},
		{
			"ID": "20220914152115-2hyn6iq",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220914152115-2hyn6iq",
				"updated": "20220914152639"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public void addBeatInfo(String serviceName, BeatInfo beatInfo) {\n  NAMING_LOGGER.info(\"[BEAT] adding beat: {} to beat map.\", beatInfo);\n  String key = buildKey(serviceName, beatInfo.getIp(), beatInfo.getPort());\n  BeatInfo existBeat;\n  if ((existBeat = dom2Beat.remove(key)) != null) {\n\texistBeat.setStopped(true);\n  }\n  dom2Beat.put(key, beatInfo);\n  // 通过定时器发送心跳,默认5秒一次\n  executorService.schedule(new BeatTask(beatInfo), beatInfo.getPeriod(), TimeUnit.MILLISECONDS);\n  MetricsMonitor.getDom2BeatSizeMonitor().set(dom2Beat.size());\n}\n\npublic void run() {\n\tif (beatInfo.isStopped()) {\n\t\treturn;\n\t}\n\t// 获取心跳周期,默认为5秒\n\tlong nextTime = beatInfo.getPeriod();\n\ttry {\n\t\t// 发送心跳\n\t\tNAMING_LOGGER.info(\"发送心跳: {}\", beatInfo.getPeriod());\n\t\t//服务代理类发送心跳\n\t\tJsonNode result = serverProxy.sendBeat(beatInfo, BeatReactor.this.lightBeatEnabled);\n\t\tlong interval = result.get(CLIENT_BEAT_INTERVAL_FIELD).asLong();\n\t\tboolean lightBeatEnabled = false;\n\t\tif (result.has(CommonParams.LIGHT_BEAT_ENABLED)) {\n\t\t\tlightBeatEnabled = result.get(CommonParams.LIGHT_BEAT_ENABLED).asBoolean();\n\t\t}\n\t\tBeatReactor.this.lightBeatEnabled = lightBeatEnabled;\n\t\tif (interval \u003e 0) {\n\t\t\tnextTime = interval;\n\t\t}\n\t\t// 判断心跳结果\n\t\tint code = NamingResponseCode.OK;\n\t\tif (result.has(CommonParams.CODE)) {\n\t\t\tcode = result.get(CommonParams.CODE).asInt();\n\t\t}\n\t\t// 如果心跳检测失败\n\t\tif (code == NamingResponseCode.RESOURCE_NOT_FOUND) {\n\t\t\tInstance instance = new Instance();\n\t\t\tinstance.setPort(beatInfo.getPort());\n\t\t\tinstance.setIp(beatInfo.getIp());\n\t\t\tinstance.setWeight(beatInfo.getWeight());\n\t\t\tinstance.setMetadata(beatInfo.getMetadata());\n\t\t\tinstance.setClusterName(beatInfo.getCluster());\n\t\t\tinstance.setServiceName(beatInfo.getServiceName());\n\t\t\tinstance.setInstanceId(instance.getInstanceId());\n\t\t\tinstance.setEphemeral(true);\n\t\t\ttry {\n\t\t\t\t// 重新注册\n\t\t\t\tserverProxy.registerService(beatInfo.getServiceName(),\n\t\t\t\t\t\tNamingUtils.getGroupName(beatInfo.getServiceName()), instance);\n\t\t\t} catch (Exception ignore) {\n\t\t\t}\n\t\t}\n\t} catch (NacosException ex) {\n\t\tNAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, code: {}, msg: {}\",\n\t\t\t\tJacksonUtils.toJson(beatInfo), ex.getErrCode(), ex.getErrMsg());\n\n\t} catch (Exception unknownEx) {\n\t\tNAMING_LOGGER.error(\"[CLIENT-BEAT] failed to send beat: {}, unknown exception msg: {}\",\n\t\t\t\tJacksonUtils.toJson(beatInfo), unknownEx.getMessage(), unknownEx);\n\t} finally {\n\t\texecutorService.schedule(new BeatTask(beatInfo), nextTime, TimeUnit.MILLISECONDS);\n\t}\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220914152229-gte655t",
			"Type": "NodeHeading",
			"HeadingLevel": 2,
			"Properties": {
				"id": "20220914152229-gte655t",
				"updated": "20220914153135"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "二、服务端注册"
				}
			]
		},
		{
			"ID": "20220914153203-j5rt592",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220914153203-j5rt592",
				"updated": "20220914153229"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "\tcom/alibaba/nacos/naming/controllers/InstanceController "
				}
			]
		},
		{
			"ID": "20220914153239-2nwel4l",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220914153239-2nwel4l",
				"updated": "20220914155437"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public String register(HttpServletRequest request) throws Exception {\n\t// 尝试获取namespaceId\n\tfinal String namespaceId = WebUtils\n\t\t\t.optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);\n\n\t// 尝试获取serviceName，其格式为 group_name@@service_name\n\tfinal String serviceName = WebUtils.required(request, CommonParams.SERVICE_NAME);\n\tNamingUtils.checkServiceNameFormat(serviceName);\n\n\t// 解析出实例信息，封装为Instance对象\n\tfinal Instance instance = HttpRequestInstanceBuilder.newBuilder()\n\t\t\t.setDefaultInstanceEphemeral(switchDomain.isDefaultInstanceEphemeral()).setRequest(request).build();\n\t// 注册实例\n\tgetInstanceOperator().registerInstance(namespaceId, serviceName, instance);\n\treturn \"ok\";\n}\n// 服务注册\npublic void registerInstance(String namespaceId, String serviceName, Instance instance) throws NacosException {\n\t// 创建一个空的service（如果是第一次来注册实例，要先创建一个空service出来，放入注册表）\n\t// 此时不包含实例信息\n\tcreateEmptyService(namespaceId, serviceName, instance.isEphemeral());\n\n\t// 拿到创建好的service\n\tService service = getService(namespaceId, serviceName);\n\n\t// 拿不到则抛异常\n\tcheckServiceIsNull(service, namespaceId, serviceName);\n\n\t// 添加要注册的实例到service中\n\taddInstance(namespaceId, serviceName, instance.isEphemeral(), instance);\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		},
		{
			"ID": "20220914153913-nc57913",
			"Type": "NodeParagraph",
			"Properties": {
				"id": "20220914153913-nc57913",
				"updated": "20220914155345"
			},
			"Children": [
				{
					"Type": "NodeText",
					"Data": "心跳检测: beat"
				}
			]
		},
		{
			"ID": "20220914154933-zoh9zg5",
			"Type": "NodeCodeBlock",
			"IsFencedCodeBlock": true,
			"Properties": {
				"id": "20220914154933-zoh9zg5",
				"updated": "20220914155328"
			},
			"Children": [
				{
					"Type": "NodeCodeBlockFenceOpenMarker",
					"Data": "```"
				},
				{
					"Type": "NodeCodeBlockFenceInfoMarker",
					"CodeBlockInfo": "amF2YQ=="
				},
				{
					"Type": "NodeCodeBlockCode",
					"Data": "public ObjectNode beat(HttpServletRequest request) throws Exception {\n\t// 解析心跳的请求参数\n\tObjectNode result = JacksonUtils.createEmptyJsonNode();\n\tresult.put(SwitchEntry.CLIENT_BEAT_INTERVAL, switchDomain.getClientBeatInterval());\n\n\tString beat = WebUtils.optional(request, \"beat\", StringUtils.EMPTY);\n\tRsInfo clientBeat = null;\n\tif (StringUtils.isNotBlank(beat)) {\n\t\tclientBeat = JacksonUtils.toObj(beat, RsInfo.class);\n\t}\n\tString clusterName = WebUtils\n\t\t\t.optional(request, CommonParams.CLUSTER_NAME, UtilsAndCommons.DEFAULT_CLUSTER_NAME);\n\tString ip = WebUtils.optional(request, \"ip\", StringUtils.EMPTY);\n\tint port = Integer.parseInt(WebUtils.optional(request, \"port\", \"0\"));\n\tif (clientBeat != null) {\n\t\tif (StringUtils.isNotBlank(clientBeat.getCluster())) {\n\t\t\tclusterName = clientBeat.getCluster();\n\t\t} else {\n\t\t\tclientBeat.setCluster(clusterName);\n\t\t}\n\t\tip = clientBeat.getIp();\n\t\tport = clientBeat.getPort();\n\t}\n\tString namespaceId = WebUtils.optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);\n\tString serviceName = WebUtils.required(request, CommonParams.SERVICE_NAME);\n\tNamingUtils.checkServiceNameFormat(serviceName);\n\tLoggers.SRV_LOG.debug(\"[CLIENT-BEAT] full arguments: beat: {}, serviceName: {}, namespaceId: {}\", clientBeat,\n\t\t\tserviceName, namespaceId);\n\tBeatInfoInstanceBuilder builder = BeatInfoInstanceBuilder.newBuilder();\n\tbuilder.setRequest(request);\n\t// 如果客户端下线或停机重启之后原先注册表中的内容就没有了，所以需要定时发送心跳的时候再注册一次\n\tint resultCode = getInstanceOperator()\n\t\t\t.handleBeat(namespaceId, serviceName, ip, port, clusterName, clientBeat, builder);\n\tresult.put(CommonParams.CODE, resultCode);\n\tresult.put(SwitchEntry.CLIENT_BEAT_INTERVAL,\n\t\t\tgetInstanceOperator().getHeartBeatInterval(namespaceId, serviceName, ip, port, clusterName));\n\tresult.put(SwitchEntry.LIGHT_BEAT_ENABLED, switchDomain.isLightBeatEnabled());\n\treturn result;\n}\n"
				},
				{
					"Type": "NodeCodeBlockFenceCloseMarker",
					"Data": "```"
				}
			]
		}
	]
}